curl -sL -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
chmod 755 /usr/bin/kubectl

while ! dnf install -y docker; do
  sleep 2
done
systemctl enable --now docker

# install awscli2
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
unzip -o /tmp/awscliv2.zip -d /tmp
/tmp/aws/install

# install eksctl
curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_linux_amd64.tar.gz"
tar -xzf eksctl_linux_amd64.tar.gz -C /tmp && rm eksctl_linux_amd64.tar.gz
sudo mv /tmp/eksctl /usr/local/bin

aws configure set default.region $aws_region
aws eks wait cluster-active --name px-deploy-$name-$cluster
aws eks update-kubeconfig --region $aws_region --name px-deploy-$name-$cluster


# set roles/users in configmap aws-auth which might be needed to show cluster details in AWS UI
if [ -n $AWS_ADD_EKS_IAM_ROLE ]; then
  echo "setting iamidentitymapping for ROLE $AWS_ADD_EKS_IAM_ROLE"
  kubectl apply -f https://s3.us-west-2.amazonaws.com/amazon-eks/docs/eks-console-full-access.yaml
  AWS_ACCOUNT_ID=$(aws sts get-caller-identity --output json | jq -r '.Account')
  eksctl create iamidentitymapping --cluster px-deploy-$name-$cluster --region=$aws_region \
    --arn arn:aws:iam::$AWS_ACCOUNT_ID:role/$AWS_ADD_EKS_IAM_ROLE --group eks-console-dashboard-full-access-group \
    --no-duplicate-arns
fi

if [ -n $AWS_ADD_EKS_IAM_USER ]; then
  echo "setting iamidentitymapping for USER $AWS_ADD_EKS_IAM_USER"
  kubectl apply -f https://s3.us-west-2.amazonaws.com/amazon-eks/docs/eks-console-full-access.yaml
  AWS_ACCOUNT_ID=$(aws sts get-caller-identity --output json | jq -r '.Account')
  eksctl create iamidentitymapping --cluster px-deploy-$name-$cluster --region=$aws_region \
    --arn arn:aws:iam::$AWS_ACCOUNT_ID:user/$AWS_ADD_EKS_IAM_USER --group eks-console-dashboard-full-access-group \
    --no-duplicate-arns
fi