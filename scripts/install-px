# Install Portworx

# If you want to use clouddrives, set the environment variable cloud_drive="type%3Dgp2%2Csize%3D150"
# otherwise existing drives will be used

# To use a journal, set the environment variable journal=auto or journal=/dev/sdb

# If you want to deploy using the operator, set the environment variable operator=true
# otherwise the DaemonSet will be used

# If you select cloud=vsphere, clouddrives will be provisioned from vsphere_disks

if [ $cloud = vsphere ]; then
  VSPHERE_USER=$(printf $vsphere_user | base64)
  VSPHERE_PASSWORD=$(printf $vsphere_password | base64)
  kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: px-vsphere-secret
  namespace: kube-system
type: Opaque
data:
  VSPHERE_USER: $VSPHERE_USER
  VSPHERE_PASSWORD: $VSPHERE_PASSWORD
EOF
  vsphere_suffix="vsp=true&ds=$vsphere_datastore&vc=$vsphere_host"
  for i in $vsphere_disks; do
    vsphere_suffix="$vsphere_suffix&s=%22type=thin,size=$i%22&kd=type%3Dthin%2Csize%3D64"
  done
fi

k8s_version=$(kubectl version --short | awk -Fv '/Server Version: / {print $3}')
url="https://install.portworx.com/$px_version?kbver=$k8s_version&b=true&c=px-deploy-$cluster&stork=true&st=k8s&lh=true&mon=true"
[ -e /usr/bin/oc ] && url="$url&osft=true"
if [ "$cloud_drive" ]; then
  if [ "$cloud" = "aws" ]; then
    key=$(grep ^aws_access_key_id /root/.aws/credentials | cut -f 3 -d " " | sed 's/+/%2B/g')
    secret=$(grep ^aws_secret_access_key /root/.aws/credentials | cut -f 3 -d " " | sed 's/+/%2B/g')
    url="$url&e=AWS_ACCESS_KEY_ID%3D$key%2CAWS_SECRET_ACCESS_KEY%3D$secret"
    url="$url&s=%22$cloud_drive%22&kd=$cloud_drive"
  fi
fi
if [ "$journal" ]; then
  url="$url&j=$journal"
fi
[ "$px_suffix" ] && url="$url&$px_suffix"
[ "$vsphere_suffix" ] && url="$url&$vsphere_suffix"
[ "$platform" = ocp4 ] && url="$url&r=17001"

if [ "$operator" = true ]; then
  [ -e /sbin/azure-repo-svc ] && kubectl taint node --all node-role.kubernetes.io/master-
  curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/0.15.1/install.sh | bash -s 0.15.1
  kubectl create -f https://operatorhub.io/install/portworx.yaml
  while ! kubectl get csv -n operators | grep -q Succeeded ; do
    sleep 2
  done
  url="$url&operator=true"
  [ -e /sbin/azure-repo-svc ] && kubectl taint node --all node-role.kubernetes.io/master=:NoSchedule
fi

kubectl apply -f https://docs.portworx.com/samples/k8s/portworx-pxc-operator.yaml
while ! kubectl wait --for=condition=ready pod -l k8s-app=prometheus-operator -n kube-system --timeout 5m; do
  sleep 2
done
curl -so /tmp/px.yml $url
kubectl apply -f /tmp/px.yml

curl -sL https://github.com/portworx/pxc/releases/download/v0.30.0/pxc-v0.30.0.linux.amd64.tar.gz | tar xvz -C /tmp/.
mv /tmp/pxc/kubectl-pxc /usr/bin/.

# Install storkctl
stork_image=$(curl -s https://install.portworx.com/$px_version?comp=stork | awk '/image: openstorage.stork/{print$2}')
id=$(docker create $stork_image)
docker cp $id:/storkctl/linux/storkctl /usr/bin

# Expose grafana on port 30112
kubectl patch svc grafana -n kube-system -p '{"spec": { "type": "NodePort", "ports": [ { "nodePort": 30112, "port": 3000, "protocol": "TCP", "targetPort": 3000 } ] } }'
