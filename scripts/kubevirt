export KUBEVIRTVERSION="v1.1.0"
export CDIVERSION="v1.57.0"

#export KUBEVIRTVERSION=$(curl -s https://api.github.com/repos/kubevirt/kubevirt/releases | grep tag_name | grep -v -- '-rc' | sort -r | head -1 | awk -F': ' '{print $2}' | sed 's/,//' | xargs)

echo "downloading kubevirt $KUBEVIRTVERSION"
kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRTVERSION}/kubevirt-operator.yaml
                 
echo "waiting for kubevirt operator readiness"
while ! kubectl wait --for=condition=ready pod --timeout=300s -lname=virt-operator -n kubevirt; do
    sleep 2
done

# check if emulation (slow!!!) needed
# hint: check only done on master node...
egrep '^flags.*(vmx|svm)' /proc/cpuinfo >/dev/null
if  [ $? = 1 ]; then
  echo "No virtualizazion capabilities found on master node cpu"
  echo "switching on software emulation (slow)"
  kubectl -n kubevirt patch kubevirts kubevirt --type=merge --patch '{"spec":{"configuration":{"developerConfiguration":{"useEmulation":true}}}}'
fi

kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRTVERSION}/kubevirt-cr.yaml

echo "waiting for kubevirt CRD readiness"
while ! kubectl wait kubevirt.kubevirt.io/kubevirt -n kubevirt --timeout=300s --for=jsonpath='{.status.phase}'='Deployed'; do
  sleep 2
done

echo "installing virtctl"
ARCH=$(uname -s | tr A-Z a-z)-$(uname -m | sed 's/x86_64/amd64/') || windows-amd64.exe
echo ${ARCH}
curl -L -o /tmp/virtctl https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRTVERSION}/virtctl-${KUBEVIRTVERSION}-${ARCH}
chmod +x /tmp/virtctl
sudo install /tmp/virtctl /usr/local/bin
ln -s /usr/local/bin/virtctl /usr/local/bin/kubectl-virt 

kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/${CDIVERSION}/cdi-operator.yaml
kubectl create -f https://github.com/kubevirt/containerized-data-importer/releases/download/${CDIVERSION}/cdi-cr.yaml

kubectl apply -f /assets/kubevirt/px-virt-sc.yml

while [ ! kubectl patch storageprofile --type merge px-virtualization -p '{ "spec": { "claimPropertySets": [ { "accessModes": [ "ReadWriteMany" ], "volumeMode": "Filesystem" } ], "cloneStrategy": "csi-clone" } }' ]; do
  echo waiting for storageprofile
  sleep 2
done
