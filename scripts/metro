# Install PX-Metro across the clusters

JQ="docker run -i --rm --name jq endeveit/docker-jq jq"

k8s_version=$(kubectl version --short | awk -Fv '/Server Version: / {print $3}')
url="https://install.portworx.com/$px_version?kbver=$k8s_version&c=px-cluster&stork=true&st=k8s&lh=true&k=etcd%3Ahttp%3A%2F%2Fmaster-1%3A2382"
[ -e /usr/bin/oc ] && url="$url&osft=true"
curl -so /tmp/px.yml $url
kubectl apply -f /tmp/px.yml

PWX_POD=$(kubectl get pods -n kube-system -l name=portworx -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
x=$(kubectl get ds/portworx -n kube-system -o json | $JQ -c '.spec.template.spec.containers[0].args')
x="${x%]},-cluster_domain, cluster-$cluster]"
kubectl patch ds/portworx -n kube-system --type json -p="[{\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/args\", \"value\":$x}]"

while : ; do
  n=$(kubectl exec -n kube-system -it $(kubectl get pods -n kube-system -lname=portworx --field-selector=status.phase=Running | tail -1 | cut -f 1 -d " ") -- /opt/pwx/bin/pxctl status 2>/dev/null | grep "Yes.*Online.*Up" | wc -l)
  [ $n -eq 6 ] && break
  sleep 1
  echo Waiting for Portworx cluster to come up
done

# Install storkctl
while : ; do
  STORK_POD=$(kubectl get pods -A -l name=stork -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
  if [ "$STORK_POD" ]; then
    STORK_NS=$(kubectl get pods -A -l name=stork -o jsonpath='{.items[0].metadata.namespace}' 2>/dev/null)
    kubectl cp -n $STORK_NS $STORK_POD:/storkctl/linux/storkctl /usr/bin/storkctl 2>/dev/null
    chmod +x /usr/bin/storkctl 2>/dev/null
    [ $? -eq 0 ] && break
  fi
  sleep 5
  echo waiting for stork
done

curl -L https://github.com/portworx/pxc/releases/download/v0.30.0/pxc-v0.30.0.linux.amd64.tar.gz | tar xvz -C /tmp/.
mv /tmp/pxc/kubectl-pxc /usr/bin/.

if [ $cluster = 1 ]; then
  while [ "$(kubectl get crd | grep -E 'migrationschedules|schedulepolicies' | wc -l)" -lt 2 ]; do
    echo waiting for CRDs
    sleep 1
  done
  kubectl apply -f /assets/metro-schedule.yml
fi
