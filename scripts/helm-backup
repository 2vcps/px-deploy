while : ; do
  n=$(kubectl get node  | grep -i ready | awk '{print$1}' | xargs kubectl get node  -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.taints}{"\n"}{end}' | grep -iv noschedule | wc -l 2>&1)
  [ $n -ge 3 ] && break
  sleep 1
  echo Waiting for Kubernetes cluster to come up
done

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh


/usr/local/bin/helm repo add portworx http://charts.portworx.io/ && helm repo update

cat <<EOF | kubectl apply -f -
kind: StorageClass
apiVersion: storage.k8s.io/v1beta1
metadata:
  name: px-repl3
provisioner: kubernetes.io/portworx-volume
parameters:
  repl: "3"
allowVolumeExpansion: true
EOF

/usr/local/bin/helm install px-backup portworx/px-backup --namespace px-backup --create-namespace --set persistentStorage.enabled=true,persistentStorage.storageClassName="px-repl3",oidc.centralOIDC.updateAdminProfile=false

until (kubectl get po --namespace px-backup -ljob-name=pxcentral-post-install-hook  -o wide | awk '{print $1, $2, $3}' |grep "Completed"); do echo "Waiting for post install hook";sleep 3; done
until (kubectl get po --namespace px-backup -lapp=px-backup  -o wide | awk '{print $1, $2, $3}' | grep "Running" | grep "1/1"); do echo "Waiting for backup service";sleep 3; done

kubectl patch svc px-backup-ui -n px-backup --type='json' -p '[{"op":"replace","path":"/spec/type","value":"NodePort"}]'

BACKUP_POD_NAME=$(kubectl get pods -n px-backup -l app=px-backup -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
kubectl cp -n px-backup $BACKUP_POD_NAME:pxbackupctl/linux/pxbackupctl /usr/bin/pxbackupctl
chmod +x /usr/bin/pxbackupctl

BACKUP_POD_IP=$(kubectl get pods -n px-backup -l app=px-backup -o jsonpath='{.items[*].status.podIP}' 2>/dev/null)
AWS_ACCESS_KEY=$(sed -n 's/aws_access_key_id[ =]*//p' /root/.aws/credentials 2>/dev/null)
AWS_SECRET_KEY=$(sed -n 's/aws_secret_access_key[ =]*//p' /root/.aws/credentials 2>/dev/null)
pubIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
backupPort=$(kubectl get svc px-backup-ui -n px-backup -o=jsonpath='{.spec.ports[?(@.port==80)].nodePort}')
client_secret=$(kubectl get secret --namespace px-backup pxc-backup-secret -o jsonpath={.data.OIDC_CLIENT_SECRET} | base64 --decode)

# Configures backup with clusters and locations
pxbackupctl login -s http://$pubIP:$backupPort -u admin -p admin
pxbackupctl create cloudcredential --aws-access-key $AWS_ACCESS_KEY --aws-secret-key $AWS_SECRET_KEY -e $BACKUP_POD_IP:10002 --orgID default -n s3 -p aws
sleep 5
pxbackupctl create backuplocation -c s3 -n aws -p s3 --s3-endpoint https://s3.$aws_region.amazonaws.com --path $BACKUP_BUCKET --s3-region $aws_region -e $BACKUP_POD_IP:10002 --orgID default
pxbackupctl create schedulepolicy --interval-minutes 15 --interval-retain 12 --name example-schedule -e $BACKUP_POD_IP:10002 --orgID default
sleep 5
ssh master-2 cat /root/.kube/config > /cluster-2-kube-config
ssh master-3 cat /root/.kube/config > /cluster-3-kube-config
pxbackupctl create cluster --name cluster-1 -k /cluster-2-kube-config -e $BACKUP_POD_IP:10002 --orgID default
pxbackupctl create cluster --name cluster-2 -k /cluster-3-kube-config -e $BACKUP_POD_IP:10002 --orgID default

# Installs monitoring
/usr/local/bin/helm install px-monitor portworx/px-monitor --namespace px-backup --create-namespace --set persistentStorage.enabled=true,persistentStorage.storageClassName="px-repl3",installCRDs=true,pxmonitor.pxCentralEndpoint=$pubIP:$backupPort,pxmonitor.oidcClientSecret=$client_secret
until (kubectl get po --namespace px-backup -ljob-name=pxcentral-monitor-post-install-setup  -o wide | awk '{print $1, $3}' |grep "Completed"); do echo "Waiting for monitoring to install";sleep 3; done

cat <<EOF >> /etc/motd
+================================================+
SAVE THE FOLLOWING DETAILS FOR FUTURE REFERENCES
+================================================+
PX-Backup User Interface Access URL : http://$pubIP:$backupPort
PX-Backup orignal admin user name: admin
PX-Backup original admin user password: admin
+================================================+
EOF

